'use client';

import { useState, useEffect } from 'react';
import ItemCard from './ItemCard';
import { Item } from '../helpers/types';

interface StreamFromLLMProps {
  targetNumber: number;
}

const StreamLlmData: React.FC<StreamFromLLMProps> = ({ targetNumber }) => {
  const [items, setItems] = useState<Array<Record<string, any>>>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const eventSource = new EventSource(`/api/stream?number=${targetNumber}`);

    eventSource.onmessage = (event) => {
      setLoading(false);
      setItems((items) => [...items, JSON.parse(event.data)]);
    };

    eventSource.onerror = (error) => {
      console.error('EventSource failed:', error);
      eventSource.close();
    };

    return () => {
      eventSource.close();
    };
  }, [targetNumber]);

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">Streaming LLM YAML data</h1>
      <h3>These suggestions are generated by Gemini on the server and streamed to the client live.</h3>
      {loading && <p>Loading...</p>}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 pt-4" >
        {items.map((item, index) => (
          <div key={index} className="h-150"><ItemCard item={item as Item}/></div>
        ))}
      </div>
    </div>
  );
};

export default StreamLlmData;
